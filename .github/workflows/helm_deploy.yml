name: Helm Update [master]

on:
  push:
    paths:
      - "deploy/helm/**"
      - ".github/workflows/helm_deploy.yml"
    branches: [ "master" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build
    
    runs-on: ubuntu-latest
    
    steps:
      # 레파지터리 체크 아웃
      - name: Check out source code
        uses: actions/checkout@v4
      
      # Helm source to CI/CD server copy transfer
      - name: Copy helm, to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NFS_HOST }}
          username: ${{ secrets.NFS_USER }}
          password: ${{ secrets.NFS_PASS }}
          source: 'deploy'
          target: ${{ secrets.NFS_PATH }}/ub/
      
      # helm upgrade --> install
      - name: SSH Remote Commands from ci/cd server
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.NFS_HOST }}
          username: ${{ secrets.NFS_USER }}
          password: ${{ secrets.NFS_PASS }}
          command: |
            cd ${{ secrets.NFS_PATH }}/ub
            chmod -R 707 ci3/uploads ci3/application/cache ci3/application/logs
            if [ ! -d "./volume/mysql/${{ secrets.DATABASE_USER }}" ]; then
            mkdir -p ./volume/mysql/${{ secrets.DATABASE_USER }}
            chown lxd:999 ./volume/mysql/${{ secrets.DATABASE_USER }}
            chmod 700 ./volume/mysql${{ secrets.DATABASE_USER }}
            else echo "Directory already exists."; fi; cd deploy/helm
            helm upgrade ub . \
            --install -n ub --create-namespace --history-max 5 --wait --timeout 10m \
            --set global.dbPassword=${{ secrets.DATABASE_PASS }} \
            --set global.nfsPath=${{ secrets.NFS_PATH }} \
            --set global.nfsServerHost=${{ secrets.NFS_HOST }} \
            --set global.baseUrl=${{ secrets.BASE_URL }} \
            --set nginx.ingress.hosts\[0\].host=${{ secrets.DOMAIN_NAME }} \
            --set nginx.ingress.tls\[0\].hosts\[0\]=${{ secrets.DOMAIN_NAME }} \
            --set nginx.ingress.tls\[0\].secretName=ub-certificate-tls \
            --set nginx.ingress.hosts\[0\].paths\[0\].path=/ \
            --set nginx.ingress.hosts\[0\].paths\[0\].pathType=ImplementationSpecific

      
      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
      
      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
